// Define the database connection
datasource db {
  provider = "postgresql" // or "mysql", "sqlite", "sqlserver"
  url      = env("DATABASE_URL") // Use environment variable for the connection string
}

// Define the generator for the Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Your models go here
model User {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  passwordHash    String
  streak          Int      @default(0)
  lastActiveDate  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  submissions     TaskSubmission[] // Relation to TaskSubmission
}

model DailyTask {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  answer          String
  createdAt       DateTime @default(now())
  submissions     TaskSubmission[] // Relation to TaskSubmission
}

model TaskSubmission {
  id              Int      @id @default(autoincrement())
  userId          Int
  taskId          Int
  submittedAnswer String
  isCorrect       Boolean
  submittedAt     DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
  task            DailyTask @relation(fields: [taskId], references: [id])
}

model Lesson {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  theory      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  problems    Problem[] // A lesson can have many problems
}

model Problem {
  id          Int      @id @default(autoincrement())
  lessonId    Int
  equation    String
  solution    Solution? // A problem has one solution
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
}

model Solution {
  id          Int      @id @default(autoincrement())
  problemId   Int @unique
  discriminant Float
  roots       String[] // Store roots as an array of strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  problem     Problem  @relation(fields: [problemId], references: [id])
}